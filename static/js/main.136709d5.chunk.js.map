{"version":3,"sources":["components/Square.js","components/Row.js","components/Board.js","helpers/helpers.js","components/MoveButton.js","components/SortButton.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","className","Row","props","children","Board","i","this","buildCssClass","key","squares","lines","includes","endgame","rows","count","j","push","renderSquare","renderRows","Component","squareCoordinates","prev","current","squareIndex","getDiff","Math","floor","getCol","getRow","MoveButton","text","classname","SortButton","ascending","App","state","history","Array","fill","xIsNext","step","winner","checkEmptySquares","nextPlayer","getLastSquareSet","filter","square","length","slice","allowedToFill","info","a","b","c","player","calculateWinner","setState","concat","buttons","map","move","jumpTo","reverse","handleClick","sortToggle","updateStatus","renderMoveButtons","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.136709d5.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Square({ value, onClick, className }) {\n    return (\n        <button\n            className={className}\n            onClick={onClick}>\n                {value}\n        </button>\n    );\n}","import React from \"react\";\n\nexport default function Row(props) {\n    return(\n        <div className=\"board-row\">{props.children}</div>\n    )\n}","import React, { Component } from \"react\";\n\nimport Square from \"./Square\";\nimport Row from \"./Row\";\n\nclass Board extends Component {\n\n    renderSquare(i) {\n        return (\n            <Square\n                className={this.buildCssClass(i)}\n                key={i}\n                value={this.props.squares[i]} \n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    buildCssClass(i) {\n        let className = \"square \";\n        if (this.props.lines.includes(i))\n            className += \"highlight\";\n        else if (this.props.endgame)\n            className += \"borderless\";\n        \n        return className;\n    }\n\n    renderRows() {\n        let rows = [];\n        let count = 0;\n        for (let i = 0; i < 3; i++) {\n            let squares = [];\n            for (let j = 0; j < 3; j++) {\n                squares.push(this.renderSquare( count ))\n                count++;\n            }\n            rows.push(<Row key={i}>{squares}</Row>);\n        }\n        return rows;\n    }\n\n    render() {\n        return(\n            <div>\n                {this.renderRows()}\n            </div>\n        )\n    }\n}\n\nexport default Board;","export function calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    for (let i = 0; i < 8; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\n            return { player: squares[a], lines: [a, b, c] };\n    }\n    return { player: null, lines: [] };\n}\n\nexport function squareCoordinates(prev, current) {\n    const squareIndex = getDiff(prev, current);\n    return `(${getCol(squareIndex)}, ${getRow(squareIndex)})`\n}\n\nexport function getDiff(prev, current) {\n    for (let i = 0; i < 9; i++)\n        if (prev[i] !== current[i])\n            return i;\n    return null;\n}\n\nexport function getRow(squareIndex) {\n    return Math.floor( squareIndex / 3) + 1;\n}\n\nexport function getCol(squareIndex) {\n    return Math.floor( squareIndex % 3 ) + 1;\n}","import React from \"react\";\n\nexport default function MoveButton({ text, onClick, classname }) {\n    return (\n        <li><button className={classname} onClick={onClick}>{text}</button></li>\n    );\n}","import React from \"react\";\n\nexport default function SortButton({ ascending, onClick }) {\n    return (\n        <button onClick={onClick}>\n            {ascending ? <span>&darr;</span> : <span>&uarr;</span>}\n        </button>\n    )\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport Board from \"./components/Board\";\nimport { calculateWinner, squareCoordinates } from './helpers/helpers';\nimport MoveButton from './components/MoveButton';\nimport SortButton from './components/SortButton';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{ squares: Array(9).fill(null) }],\n            xIsNext: true,\n            step: 0,\n            winner: null,\n            lines: [],\n            ascending: true\n        }\n    }\n\n    nextPlayer() {\n        return this.state.xIsNext ? 'X' : 'O';\n    }\n\n    updateStatus() {\n        const winner = this.state.winner;\n\n        if (winner)\n            return `Winner: ${winner}`;\n        else if (this.checkEmptySquares() === 0 )\n            return `Draw`;\n\n        return `Next player: ${this.nextPlayer()}`;\n    }\n\n    getLastSquareSet() {\n        return this.state.history[this.state.step].squares;\n    }\n    \n    checkEmptySquares() {\n        return this.getLastSquareSet().filter((square) => square === null).length;\n    }\n\n    handleClick(i) {\n        const squares = this.getLastSquareSet().slice();\n        if (this.allowedToFill(squares[i])) {\n            squares[i] = this.nextPlayer();\n            const history = this.state.history.slice(0, this.state.step + 1);\n            const info = calculateWinner(squares);\n            this.setState({\n                history: history.concat([ { squares } ]),\n                step: history.length,\n                xIsNext: !this.state.xIsNext,\n                winner: info.player,\n                lines: info.lines\n            });\n        }\n    }\n\n    allowedToFill(square) {\n        return this.state.winner || square ? false : true\n    }\n\n    jumpTo(step) {\n        this.setState({\n            step,\n            xIsNext: (step % 2) === 0,\n            winner: (step === this.state.step ? this.state.winner : null)\n        });\n    }\n\n    sortToggle() {\n        this.setState({ ascending: !this.state.ascending });\n    }\n\n    renderMoveButtons() {\n        let prev = this.state.history[0];\n        const buttons = this.state.history.map((current, move) => {\n            const text = move ? `Go to move #${move} on ${squareCoordinates(prev.squares, current.squares)}` : 'Restart game';\n            prev = current;\n            return (\n                <MoveButton \n                    key={move}\n                    classname={this.state.step === move ? \"selected\" : \"\"}\n                    text={text}\n                    onClick={() => this.jumpTo(move)} />\n            );\n        });\n        return this.state.ascending ? buttons : buttons.slice(0).reverse();\n    }\n\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        endgame={this.state.winner ? true : false}\n                        lines={this.state.lines}\n                        squares={this.getLastSquareSet()} \n                        onClick={(i) => this.handleClick(i)} />\n                </div>\n                <div className=\"game-info\">\n                    <div>\n                        <SortButton \n                            ascending={this.state.ascending} \n                            onClick={() => this.sortToggle()} />\n                        {this.updateStatus()}\n                    </div>\n                    <ol>{this.renderMoveButtons()}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}